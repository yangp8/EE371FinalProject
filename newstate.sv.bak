module state(
	input logic clk, reset, cleaning,
	output logic [9:0] x,
	output logic [8:0] y//,
	//output logic cleaning
);
	enum{normal, cleans} ns, ps;
	logic [31:0] count;
	always_comb begin
		case(ps)
			
			normal: begin if(cleaning) ns = cleans; else ns = ps;  end
			cleans: begin if(~cleaning) ns = normal; else ns = ps;  end
		endcase
	end
	
	always_ff @(posedge clk) begin
		if(reset) begin
			x <= 0;
			y <= 0;
			count <= 0;
			ps <= normal;
		end 
		else	
		if( x <= 640 && y <= 480 ) begin
			x <= x+1;
			if(x == 640) begin y <= y+1; x <= 0;end
		end else begin x<= 0; y<= 0; end
		count <= x * y;
	   ps <= ns;
	end
endmodule
